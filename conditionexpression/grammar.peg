package conditionexpression

type Parser Peg {

}

ConditionExpression <- SPACING Condition SPACING END

Condition
 <- '(' SPACING Condition SPACING ')'
  / 'NOT' SPACING Condition
  / AtomicCondition (SPACING 'AND' SPACING Condition)+
  / AtomicCondition (SPACING 'OR' SPACING Condition)*

AtomicCondition
 <- Comparison
#  / Membership
  / Range
  / Function

Comparison <-
    (AttributeName/AttributeRef)
    SPACING ComparisonOperator SPACING
    ValueRef

ComparisonOperator <- '=' / '<' ![>=] / '<>' / '<=' / '>' !'=' / '>='

Range <-
    (AttributeName/AttributeRef) SPACING
    'BETWEEN' SPACING ValueRef SPACING 'AND' SPACING ValueRef

Function <- BeginsWith / AttributeExists / AttributeNotExists

BeginsWith <-
    'begins_with' SPACING '(' SPACING
    Attribute SPACING ',' SPACING
    ValueRef SPACING ')'

AttributeExists
 <- 'attribute_exists'     SPACING '(' SPACING Attribute SPACING ')'

AttributeNotExists
 <- 'attribute_not_exists' SPACING '(' SPACING Attribute SPACING ')'

AttributeName <- [a-zA-Z0-9]+
AttributeRef <- '#' [a-zA-Z0-9]+

Attribute <- (AttributeName/AttributeRef) ('.' Attribute)*

ValueRef <- ':' [a-zA-Z0-9]+

SPACING <- ' '*

END <- !.