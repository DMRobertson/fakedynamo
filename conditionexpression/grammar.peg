package conditionexpression

type Parser Peg {

}

ConditionExpression <- SP* Condition SP* END

# https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeNames.html
ExpressionAttributeName <- '#' [a-zA-Z_]+

# https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Attributes.html
RawAttribute <- [a-zA-Z] [a-zA-Z0-9]*

Name <- RawAttribute / ExpressionAttributeName
ListDereference <- '[' [0-9]+ ']'
MapDereference <- '.' Name
DocumentPath <- Name (ListDereference / MapDereference)*

# https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeValues.html
ExpressionAttributeValue <- ':' [a-zA-Z0-9_]+

# https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html#Expressions.OperatorsAndFunctions.Syntax

Operand <- DocumentPath / ExpressionAttributeValue

Comparison <- Operand SP* Comparator SP* Operand
Comparator <- '=' / '<>' / '<=' / '<' / '>=' / '>'

Range <- Operand SP+ 'BETWEEN' SP+ Operand SP+ 'AND' SP+ Operand
Membership <- Operand SP+ 'IN' SP* '(' SP* Operand (SP* ',' SP* Operand SP*)+ ')'

Function <- AttributeExists / AttributeNotExists / AttributeType / BeginsWith / Contains / Size

AttributeExists <- 'attribute_exists' SP* '(' SP* DocumentPath SP* ')'
AttributeNotExists <- 'attribute_not_exists' SP* '(' SP* DocumentPath SP* ')'
AttributeType <-
    'attribute_type' SP* '(' SP*
        DocumentPath SP* ',' SP* ExpressionAttributeValue
    SP* ')'
BeginsWith <-
    'begins_with' SP* '(' SP*
        DocumentPath SP* ',' SP* ExpressionAttributeValue
    SP* ')'
Contains <-
    'contains' SP* '(' SP*
        DocumentPath SP* ',' SP* Operand
    SP* ')'
Size <- 'size' SP* '(' SP* DocumentPath SP* ',' SP* ')'

Condition <- Disjunct (SP+ OR SP+ Disjunct)*
Disjunct <- Conjunct (SP+ AND SP+ Conjunct)*
Conjunct <-
    'NOT' SP+ Condition
    / '(' SP* Condition SP* ')'
    / Function
    / Range
    / Membership
    / Contains
    / Comparison

AND <- 'AND' / 'and'
OR <- 'OR' / 'or'

SP <- ' '
END <- !.
