package conditionexpression

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleConditionExpression
	ruleExpressionAttributeName
	ruleRawAttribute
	ruleName
	ruleListDereference
	ruleDocumentPath
	ruleExpressionAttributeValue
	ruleOperand
	ruleSize
	ruleComparison
	ruleComparator
	ruleRange
	ruleMembership
	ruleFunctionReturningBool
	ruleAttributeExists
	ruleAttributeNotExists
	ruleAttributeType
	ruleBeginsWith
	ruleContains
	ruleCondition
	ruleDisjunct
	ruleConjunct
	ruleNegation
	ruleBooleanAtom
	ruleAND
	ruleOR
	ruleMAYBE_SP
	ruleSP
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"ConditionExpression",
	"ExpressionAttributeName",
	"RawAttribute",
	"Name",
	"ListDereference",
	"DocumentPath",
	"ExpressionAttributeValue",
	"Operand",
	"Size",
	"Comparison",
	"Comparator",
	"Range",
	"Membership",
	"FunctionReturningBool",
	"AttributeExists",
	"AttributeNotExists",
	"AttributeType",
	"BeginsWith",
	"Contains",
	"Condition",
	"Disjunct",
	"Conjunct",
	"Negation",
	"BooleanAtom",
	"AND",
	"OR",
	"MAYBE_SP",
	"SP",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [30]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 ConditionExpression <- <(MAYBE_SP Condition MAYBE_SP END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleMAYBE_SP]() {
					goto l0
				}
				if !_rules[ruleCondition]() {
					goto l0
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleConditionExpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 ExpressionAttributeName <- <('#' ([a-z] / [A-Z] / '_')+)> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				if buffer[position] != rune('#') {
					goto l2
				}
				position++
				{
					position6, tokenIndex6 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l7
					}
					position++
					goto l6
				l7:
					position, tokenIndex = position6, tokenIndex6
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l8
					}
					position++
					goto l6
				l8:
					position, tokenIndex = position6, tokenIndex6
					if buffer[position] != rune('_') {
						goto l2
					}
					position++
				}
			l6:
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					{
						position9, tokenIndex9 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l10
						}
						position++
						goto l9
					l10:
						position, tokenIndex = position9, tokenIndex9
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l11
						}
						position++
						goto l9
					l11:
						position, tokenIndex = position9, tokenIndex9
						if buffer[position] != rune('_') {
							goto l5
						}
						position++
					}
				l9:
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleExpressionAttributeName, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 RawAttribute <- <(([a-z] / [A-Z]) ([a-z] / [A-Z] / [0-9])*)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				{
					position14, tokenIndex14 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l15
					}
					position++
					goto l14
				l15:
					position, tokenIndex = position14, tokenIndex14
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l12
					}
					position++
				}
			l14:
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					{
						position18, tokenIndex18 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l19
						}
						position++
						goto l18
					l19:
						position, tokenIndex = position18, tokenIndex18
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l20
						}
						position++
						goto l18
					l20:
						position, tokenIndex = position18, tokenIndex18
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l17
						}
						position++
					}
				l18:
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				add(ruleRawAttribute, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 Name <- <(RawAttribute / ExpressionAttributeName)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23, tokenIndex23 := position, tokenIndex
					if !_rules[ruleRawAttribute]() {
						goto l24
					}
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if !_rules[ruleExpressionAttributeName]() {
						goto l21
					}
				}
			l23:
				add(ruleName, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 ListDereference <- <('[' [0-9]+ ']')> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				if buffer[position] != rune('[') {
					goto l25
				}
				position++
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l25
				}
				position++
			l27:
				{
					position28, tokenIndex28 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l28
					}
					position++
					goto l27
				l28:
					position, tokenIndex = position28, tokenIndex28
				}
				if buffer[position] != rune(']') {
					goto l25
				}
				position++
				add(ruleListDereference, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 5 DocumentPath <- <(Name (ListDereference / ('.' Name))*)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleName]() {
					goto l29
				}
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					{
						position33, tokenIndex33 := position, tokenIndex
						if !_rules[ruleListDereference]() {
							goto l34
						}
						goto l33
					l34:
						position, tokenIndex = position33, tokenIndex33
						if buffer[position] != rune('.') {
							goto l32
						}
						position++
						if !_rules[ruleName]() {
							goto l32
						}
					}
				l33:
					goto l31
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
				add(ruleDocumentPath, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 6 ExpressionAttributeValue <- <(':' ([a-z] / [A-Z] / [0-9] / '_')+)> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				if buffer[position] != rune(':') {
					goto l35
				}
				position++
				{
					position39, tokenIndex39 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l40
					}
					position++
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l41
					}
					position++
					goto l39
				l41:
					position, tokenIndex = position39, tokenIndex39
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l42
					}
					position++
					goto l39
				l42:
					position, tokenIndex = position39, tokenIndex39
					if buffer[position] != rune('_') {
						goto l35
					}
					position++
				}
			l39:
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						position43, tokenIndex43 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l44
						}
						position++
						goto l43
					l44:
						position, tokenIndex = position43, tokenIndex43
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l45
						}
						position++
						goto l43
					l45:
						position, tokenIndex = position43, tokenIndex43
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l46
						}
						position++
						goto l43
					l46:
						position, tokenIndex = position43, tokenIndex43
						if buffer[position] != rune('_') {
							goto l38
						}
						position++
					}
				l43:
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(ruleExpressionAttributeValue, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 7 Operand <- <(Size / DocumentPath / ExpressionAttributeValue)> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[ruleSize]() {
						goto l50
					}
					goto l49
				l50:
					position, tokenIndex = position49, tokenIndex49
					if !_rules[ruleDocumentPath]() {
						goto l51
					}
					goto l49
				l51:
					position, tokenIndex = position49, tokenIndex49
					if !_rules[ruleExpressionAttributeValue]() {
						goto l47
					}
				}
			l49:
				add(ruleOperand, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 Size <- <('s' 'i' 'z' 'e' MAYBE_SP '(' MAYBE_SP DocumentPath MAYBE_SP ')')> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if buffer[position] != rune('s') {
					goto l52
				}
				position++
				if buffer[position] != rune('i') {
					goto l52
				}
				position++
				if buffer[position] != rune('z') {
					goto l52
				}
				position++
				if buffer[position] != rune('e') {
					goto l52
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l52
				}
				if buffer[position] != rune('(') {
					goto l52
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l52
				}
				if !_rules[ruleDocumentPath]() {
					goto l52
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l52
				}
				if buffer[position] != rune(')') {
					goto l52
				}
				position++
				add(ruleSize, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 9 Comparison <- <(Operand MAYBE_SP Comparator MAYBE_SP Operand)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[ruleOperand]() {
					goto l54
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l54
				}
				if !_rules[ruleComparator]() {
					goto l54
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l54
				}
				if !_rules[ruleOperand]() {
					goto l54
				}
				add(ruleComparison, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 10 Comparator <- <('=' / ('<' '>') / ('<' '=') / '<' / ('>' '=') / '>')> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				{
					position58, tokenIndex58 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l59
					}
					position++
					goto l58
				l59:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('<') {
						goto l60
					}
					position++
					if buffer[position] != rune('>') {
						goto l60
					}
					position++
					goto l58
				l60:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('<') {
						goto l61
					}
					position++
					if buffer[position] != rune('=') {
						goto l61
					}
					position++
					goto l58
				l61:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('<') {
						goto l62
					}
					position++
					goto l58
				l62:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('>') {
						goto l63
					}
					position++
					if buffer[position] != rune('=') {
						goto l63
					}
					position++
					goto l58
				l63:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('>') {
						goto l56
					}
					position++
				}
			l58:
				add(ruleComparator, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 11 Range <- <(Operand SP ('B' 'E' 'T' 'W' 'E' 'E' 'N') SP Operand SP ('A' 'N' 'D') SP Operand)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if !_rules[ruleOperand]() {
					goto l64
				}
				if !_rules[ruleSP]() {
					goto l64
				}
				if buffer[position] != rune('B') {
					goto l64
				}
				position++
				if buffer[position] != rune('E') {
					goto l64
				}
				position++
				if buffer[position] != rune('T') {
					goto l64
				}
				position++
				if buffer[position] != rune('W') {
					goto l64
				}
				position++
				if buffer[position] != rune('E') {
					goto l64
				}
				position++
				if buffer[position] != rune('E') {
					goto l64
				}
				position++
				if buffer[position] != rune('N') {
					goto l64
				}
				position++
				if !_rules[ruleSP]() {
					goto l64
				}
				if !_rules[ruleOperand]() {
					goto l64
				}
				if !_rules[ruleSP]() {
					goto l64
				}
				if buffer[position] != rune('A') {
					goto l64
				}
				position++
				if buffer[position] != rune('N') {
					goto l64
				}
				position++
				if buffer[position] != rune('D') {
					goto l64
				}
				position++
				if !_rules[ruleSP]() {
					goto l64
				}
				if !_rules[ruleOperand]() {
					goto l64
				}
				add(ruleRange, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 12 Membership <- <(Operand SP ('I' 'N') MAYBE_SP '(' MAYBE_SP Operand (MAYBE_SP ',' MAYBE_SP Operand MAYBE_SP)+ ')')> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				if !_rules[ruleOperand]() {
					goto l66
				}
				if !_rules[ruleSP]() {
					goto l66
				}
				if buffer[position] != rune('I') {
					goto l66
				}
				position++
				if buffer[position] != rune('N') {
					goto l66
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l66
				}
				if buffer[position] != rune('(') {
					goto l66
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l66
				}
				if !_rules[ruleOperand]() {
					goto l66
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l66
				}
				if buffer[position] != rune(',') {
					goto l66
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l66
				}
				if !_rules[ruleOperand]() {
					goto l66
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l66
				}
			l68:
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[ruleMAYBE_SP]() {
						goto l69
					}
					if buffer[position] != rune(',') {
						goto l69
					}
					position++
					if !_rules[ruleMAYBE_SP]() {
						goto l69
					}
					if !_rules[ruleOperand]() {
						goto l69
					}
					if !_rules[ruleMAYBE_SP]() {
						goto l69
					}
					goto l68
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
				if buffer[position] != rune(')') {
					goto l66
				}
				position++
				add(ruleMembership, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 13 FunctionReturningBool <- <(AttributeExists / AttributeNotExists / AttributeType / BeginsWith / Contains)> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if !_rules[ruleAttributeExists]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleAttributeNotExists]() {
						goto l74
					}
					goto l72
				l74:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleAttributeType]() {
						goto l75
					}
					goto l72
				l75:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleBeginsWith]() {
						goto l76
					}
					goto l72
				l76:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleContains]() {
						goto l70
					}
				}
			l72:
				add(ruleFunctionReturningBool, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 14 AttributeExists <- <('a' 't' 't' 'r' 'i' 'b' 'u' 't' 'e' '_' 'e' 'x' 'i' 's' 't' 's' MAYBE_SP '(' MAYBE_SP DocumentPath MAYBE_SP ')')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('r') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('b') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('e') {
					goto l77
				}
				position++
				if buffer[position] != rune('_') {
					goto l77
				}
				position++
				if buffer[position] != rune('e') {
					goto l77
				}
				position++
				if buffer[position] != rune('x') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l77
				}
				if buffer[position] != rune('(') {
					goto l77
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l77
				}
				if !_rules[ruleDocumentPath]() {
					goto l77
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l77
				}
				if buffer[position] != rune(')') {
					goto l77
				}
				position++
				add(ruleAttributeExists, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 AttributeNotExists <- <('a' 't' 't' 'r' 'i' 'b' 'u' 't' 'e' '_' 'n' 'o' 't' '_' 'e' 'x' 'i' 's' 't' 's' MAYBE_SP '(' MAYBE_SP DocumentPath MAYBE_SP ')')> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if buffer[position] != rune('a') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if buffer[position] != rune('r') {
					goto l79
				}
				position++
				if buffer[position] != rune('i') {
					goto l79
				}
				position++
				if buffer[position] != rune('b') {
					goto l79
				}
				position++
				if buffer[position] != rune('u') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if buffer[position] != rune('e') {
					goto l79
				}
				position++
				if buffer[position] != rune('_') {
					goto l79
				}
				position++
				if buffer[position] != rune('n') {
					goto l79
				}
				position++
				if buffer[position] != rune('o') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if buffer[position] != rune('_') {
					goto l79
				}
				position++
				if buffer[position] != rune('e') {
					goto l79
				}
				position++
				if buffer[position] != rune('x') {
					goto l79
				}
				position++
				if buffer[position] != rune('i') {
					goto l79
				}
				position++
				if buffer[position] != rune('s') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if buffer[position] != rune('s') {
					goto l79
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l79
				}
				if buffer[position] != rune('(') {
					goto l79
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l79
				}
				if !_rules[ruleDocumentPath]() {
					goto l79
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l79
				}
				if buffer[position] != rune(')') {
					goto l79
				}
				position++
				add(ruleAttributeNotExists, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 AttributeType <- <('a' 't' 't' 'r' 'i' 'b' 'u' 't' 'e' '_' 't' 'y' 'p' 'e' MAYBE_SP '(' MAYBE_SP DocumentPath MAYBE_SP ',' MAYBE_SP ExpressionAttributeValue MAYBE_SP ')')> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				if buffer[position] != rune('a') {
					goto l81
				}
				position++
				if buffer[position] != rune('t') {
					goto l81
				}
				position++
				if buffer[position] != rune('t') {
					goto l81
				}
				position++
				if buffer[position] != rune('r') {
					goto l81
				}
				position++
				if buffer[position] != rune('i') {
					goto l81
				}
				position++
				if buffer[position] != rune('b') {
					goto l81
				}
				position++
				if buffer[position] != rune('u') {
					goto l81
				}
				position++
				if buffer[position] != rune('t') {
					goto l81
				}
				position++
				if buffer[position] != rune('e') {
					goto l81
				}
				position++
				if buffer[position] != rune('_') {
					goto l81
				}
				position++
				if buffer[position] != rune('t') {
					goto l81
				}
				position++
				if buffer[position] != rune('y') {
					goto l81
				}
				position++
				if buffer[position] != rune('p') {
					goto l81
				}
				position++
				if buffer[position] != rune('e') {
					goto l81
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l81
				}
				if buffer[position] != rune('(') {
					goto l81
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l81
				}
				if !_rules[ruleDocumentPath]() {
					goto l81
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l81
				}
				if buffer[position] != rune(',') {
					goto l81
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l81
				}
				if !_rules[ruleExpressionAttributeValue]() {
					goto l81
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l81
				}
				if buffer[position] != rune(')') {
					goto l81
				}
				position++
				add(ruleAttributeType, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 17 BeginsWith <- <('b' 'e' 'g' 'i' 'n' 's' '_' 'w' 'i' 't' 'h' MAYBE_SP '(' MAYBE_SP DocumentPath MAYBE_SP ',' MAYBE_SP ExpressionAttributeValue MAYBE_SP ')')> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				if buffer[position] != rune('b') {
					goto l83
				}
				position++
				if buffer[position] != rune('e') {
					goto l83
				}
				position++
				if buffer[position] != rune('g') {
					goto l83
				}
				position++
				if buffer[position] != rune('i') {
					goto l83
				}
				position++
				if buffer[position] != rune('n') {
					goto l83
				}
				position++
				if buffer[position] != rune('s') {
					goto l83
				}
				position++
				if buffer[position] != rune('_') {
					goto l83
				}
				position++
				if buffer[position] != rune('w') {
					goto l83
				}
				position++
				if buffer[position] != rune('i') {
					goto l83
				}
				position++
				if buffer[position] != rune('t') {
					goto l83
				}
				position++
				if buffer[position] != rune('h') {
					goto l83
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l83
				}
				if buffer[position] != rune('(') {
					goto l83
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l83
				}
				if !_rules[ruleDocumentPath]() {
					goto l83
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l83
				}
				if buffer[position] != rune(',') {
					goto l83
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l83
				}
				if !_rules[ruleExpressionAttributeValue]() {
					goto l83
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l83
				}
				if buffer[position] != rune(')') {
					goto l83
				}
				position++
				add(ruleBeginsWith, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 18 Contains <- <('c' 'o' 'n' 't' 'a' 'i' 'n' 's' MAYBE_SP '(' MAYBE_SP DocumentPath MAYBE_SP ',' MAYBE_SP Operand MAYBE_SP ')')> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				if buffer[position] != rune('c') {
					goto l85
				}
				position++
				if buffer[position] != rune('o') {
					goto l85
				}
				position++
				if buffer[position] != rune('n') {
					goto l85
				}
				position++
				if buffer[position] != rune('t') {
					goto l85
				}
				position++
				if buffer[position] != rune('a') {
					goto l85
				}
				position++
				if buffer[position] != rune('i') {
					goto l85
				}
				position++
				if buffer[position] != rune('n') {
					goto l85
				}
				position++
				if buffer[position] != rune('s') {
					goto l85
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l85
				}
				if buffer[position] != rune('(') {
					goto l85
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l85
				}
				if !_rules[ruleDocumentPath]() {
					goto l85
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l85
				}
				if buffer[position] != rune(',') {
					goto l85
				}
				position++
				if !_rules[ruleMAYBE_SP]() {
					goto l85
				}
				if !_rules[ruleOperand]() {
					goto l85
				}
				if !_rules[ruleMAYBE_SP]() {
					goto l85
				}
				if buffer[position] != rune(')') {
					goto l85
				}
				position++
				add(ruleContains, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 19 Condition <- <(Disjunct (SP OR SP Disjunct)*)> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				if !_rules[ruleDisjunct]() {
					goto l87
				}
			l89:
				{
					position90, tokenIndex90 := position, tokenIndex
					if !_rules[ruleSP]() {
						goto l90
					}
					if !_rules[ruleOR]() {
						goto l90
					}
					if !_rules[ruleSP]() {
						goto l90
					}
					if !_rules[ruleDisjunct]() {
						goto l90
					}
					goto l89
				l90:
					position, tokenIndex = position90, tokenIndex90
				}
				add(ruleCondition, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 20 Disjunct <- <(Conjunct (SP AND SP Conjunct)*)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleConjunct]() {
					goto l91
				}
			l93:
				{
					position94, tokenIndex94 := position, tokenIndex
					if !_rules[ruleSP]() {
						goto l94
					}
					if !_rules[ruleAND]() {
						goto l94
					}
					if !_rules[ruleSP]() {
						goto l94
					}
					if !_rules[ruleConjunct]() {
						goto l94
					}
					goto l93
				l94:
					position, tokenIndex = position94, tokenIndex94
				}
				add(ruleDisjunct, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 21 Conjunct <- <(Negation / ('(' MAYBE_SP BooleanAtom MAYBE_SP ')') / BooleanAtom)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[ruleNegation]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position97, tokenIndex97
					if buffer[position] != rune('(') {
						goto l99
					}
					position++
					if !_rules[ruleMAYBE_SP]() {
						goto l99
					}
					if !_rules[ruleBooleanAtom]() {
						goto l99
					}
					if !_rules[ruleMAYBE_SP]() {
						goto l99
					}
					if buffer[position] != rune(')') {
						goto l99
					}
					position++
					goto l97
				l99:
					position, tokenIndex = position97, tokenIndex97
					if !_rules[ruleBooleanAtom]() {
						goto l95
					}
				}
			l97:
				add(ruleConjunct, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 22 Negation <- <('N' 'O' 'T' SP BooleanAtom)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				if buffer[position] != rune('N') {
					goto l100
				}
				position++
				if buffer[position] != rune('O') {
					goto l100
				}
				position++
				if buffer[position] != rune('T') {
					goto l100
				}
				position++
				if !_rules[ruleSP]() {
					goto l100
				}
				if !_rules[ruleBooleanAtom]() {
					goto l100
				}
				add(ruleNegation, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 23 BooleanAtom <- <(FunctionReturningBool / Range / Membership / Contains / Comparison)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					position104, tokenIndex104 := position, tokenIndex
					if !_rules[ruleFunctionReturningBool]() {
						goto l105
					}
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if !_rules[ruleRange]() {
						goto l106
					}
					goto l104
				l106:
					position, tokenIndex = position104, tokenIndex104
					if !_rules[ruleMembership]() {
						goto l107
					}
					goto l104
				l107:
					position, tokenIndex = position104, tokenIndex104
					if !_rules[ruleContains]() {
						goto l108
					}
					goto l104
				l108:
					position, tokenIndex = position104, tokenIndex104
					if !_rules[ruleComparison]() {
						goto l102
					}
				}
			l104:
				add(ruleBooleanAtom, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 24 AND <- <(('A' 'N' 'D') / ('a' 'n' 'd'))> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				{
					position111, tokenIndex111 := position, tokenIndex
					if buffer[position] != rune('A') {
						goto l112
					}
					position++
					if buffer[position] != rune('N') {
						goto l112
					}
					position++
					if buffer[position] != rune('D') {
						goto l112
					}
					position++
					goto l111
				l112:
					position, tokenIndex = position111, tokenIndex111
					if buffer[position] != rune('a') {
						goto l109
					}
					position++
					if buffer[position] != rune('n') {
						goto l109
					}
					position++
					if buffer[position] != rune('d') {
						goto l109
					}
					position++
				}
			l111:
				add(ruleAND, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 25 OR <- <(('O' 'R') / ('o' 'r'))> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				{
					position115, tokenIndex115 := position, tokenIndex
					if buffer[position] != rune('O') {
						goto l116
					}
					position++
					if buffer[position] != rune('R') {
						goto l116
					}
					position++
					goto l115
				l116:
					position, tokenIndex = position115, tokenIndex115
					if buffer[position] != rune('o') {
						goto l113
					}
					position++
					if buffer[position] != rune('r') {
						goto l113
					}
					position++
				}
			l115:
				add(ruleOR, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 26 MAYBE_SP <- <' '*> */
		func() bool {
			{
				position118 := position
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l120
					}
					position++
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				add(ruleMAYBE_SP, position118)
			}
			return true
		},
		/* 27 SP <- <' '+> */
		func() bool {
			position121, tokenIndex121 := position, tokenIndex
			{
				position122 := position
				if buffer[position] != rune(' ') {
					goto l121
				}
				position++
			l123:
				{
					position124, tokenIndex124 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l124
					}
					position++
					goto l123
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
				add(ruleSP, position122)
			}
			return true
		l121:
			position, tokenIndex = position121, tokenIndex121
			return false
		},
		/* 28 END <- <!.> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				{
					position127, tokenIndex127 := position, tokenIndex
					if !matchDot() {
						goto l127
					}
					goto l125
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
				add(ruleEND, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
	}
	p.rules = _rules
	return nil
}
