package conditionexpression

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleConditionExpression
	ruleCondition
	ruleAtomicCondition
	ruleBooleanOperation
	ruleComparison
	ruleComparisonOperator
	ruleRange
	ruleFunction
	ruleBeginsWith
	ruleAttributeName
	ruleAttributeRef
	ruleValueRef
	ruleSPACING
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"ConditionExpression",
	"Condition",
	"AtomicCondition",
	"BooleanOperation",
	"Comparison",
	"ComparisonOperator",
	"Range",
	"Function",
	"BeginsWith",
	"AttributeName",
	"AttributeRef",
	"ValueRef",
	"SPACING",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	Buffer string
	buffer []rune
	rules  [15]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 ConditionExpression <- <(SPACING Condition SPACING END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSPACING]() {
					goto l0
				}
				if !_rules[ruleCondition]() {
					goto l0
				}
				if !_rules[ruleSPACING]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleConditionExpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Condition <- <(AtomicCondition / BooleanOperation)> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleAtomicCondition]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleBooleanOperation]() {
						goto l2
					}
				}
			l4:
				add(ruleCondition, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 AtomicCondition <- <(Comparison / Range / Function / ('(' SPACING Condition SPACING ')') / )> */
		func() bool {
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[ruleComparison]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleRange]() {
						goto l10
					}
					goto l8
				l10:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleFunction]() {
						goto l11
					}
					goto l8
				l11:
					position, tokenIndex = position8, tokenIndex8
					if buffer[position] != rune('(') {
						goto l12
					}
					position++
					if !_rules[ruleSPACING]() {
						goto l12
					}
					if !_rules[ruleCondition]() {
						goto l12
					}
					if !_rules[ruleSPACING]() {
						goto l12
					}
					if buffer[position] != rune(')') {
						goto l12
					}
					position++
					goto l8
				l12:
					position, tokenIndex = position8, tokenIndex8
				}
			l8:
				add(ruleAtomicCondition, position7)
			}
			return true
		},
		/* 3 BooleanOperation <- <((Condition SPACING ('A' 'N' 'D') SPACING Condition) / (Condition SPACING ('O' 'R') SPACING Condition))> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleCondition]() {
						goto l16
					}
					if !_rules[ruleSPACING]() {
						goto l16
					}
					if buffer[position] != rune('A') {
						goto l16
					}
					position++
					if buffer[position] != rune('N') {
						goto l16
					}
					position++
					if buffer[position] != rune('D') {
						goto l16
					}
					position++
					if !_rules[ruleSPACING]() {
						goto l16
					}
					if !_rules[ruleCondition]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCondition]() {
						goto l13
					}
					if !_rules[ruleSPACING]() {
						goto l13
					}
					if buffer[position] != rune('O') {
						goto l13
					}
					position++
					if buffer[position] != rune('R') {
						goto l13
					}
					position++
					if !_rules[ruleSPACING]() {
						goto l13
					}
					if !_rules[ruleCondition]() {
						goto l13
					}
				}
			l15:
				add(ruleBooleanOperation, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 4 Comparison <- <((AttributeName / AttributeRef) SPACING ComparisonOperator SPACING ValueRef)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[ruleAttributeName]() {
						goto l20
					}
					goto l19
				l20:
					position, tokenIndex = position19, tokenIndex19
					if !_rules[ruleAttributeRef]() {
						goto l17
					}
				}
			l19:
				if !_rules[ruleSPACING]() {
					goto l17
				}
				if !_rules[ruleComparisonOperator]() {
					goto l17
				}
				if !_rules[ruleSPACING]() {
					goto l17
				}
				if !_rules[ruleValueRef]() {
					goto l17
				}
				add(ruleComparison, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 5 ComparisonOperator <- <('=' / ('<' !('>' / '=')) / ('<' '>') / ('<' '=') / ('>' !'=') / ('>' '='))> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23, tokenIndex23 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l24
					}
					position++
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('<') {
						goto l25
					}
					position++
					{
						position26, tokenIndex26 := position, tokenIndex
						{
							position27, tokenIndex27 := position, tokenIndex
							if buffer[position] != rune('>') {
								goto l28
							}
							position++
							goto l27
						l28:
							position, tokenIndex = position27, tokenIndex27
							if buffer[position] != rune('=') {
								goto l26
							}
							position++
						}
					l27:
						goto l25
					l26:
						position, tokenIndex = position26, tokenIndex26
					}
					goto l23
				l25:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('<') {
						goto l29
					}
					position++
					if buffer[position] != rune('>') {
						goto l29
					}
					position++
					goto l23
				l29:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('<') {
						goto l30
					}
					position++
					if buffer[position] != rune('=') {
						goto l30
					}
					position++
					goto l23
				l30:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('>') {
						goto l31
					}
					position++
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l32
						}
						position++
						goto l31
					l32:
						position, tokenIndex = position32, tokenIndex32
					}
					goto l23
				l31:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('>') {
						goto l21
					}
					position++
					if buffer[position] != rune('=') {
						goto l21
					}
					position++
				}
			l23:
				add(ruleComparisonOperator, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 6 Range <- <((AttributeName / AttributeRef) SPACING ('B' 'E' 'T' 'W' 'E' 'E' 'N') SPACING ValueRef SPACING ('A' 'N' 'D') SPACING ValueRef)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleAttributeName]() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleAttributeRef]() {
						goto l33
					}
				}
			l35:
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if buffer[position] != rune('B') {
					goto l33
				}
				position++
				if buffer[position] != rune('E') {
					goto l33
				}
				position++
				if buffer[position] != rune('T') {
					goto l33
				}
				position++
				if buffer[position] != rune('W') {
					goto l33
				}
				position++
				if buffer[position] != rune('E') {
					goto l33
				}
				position++
				if buffer[position] != rune('E') {
					goto l33
				}
				position++
				if buffer[position] != rune('N') {
					goto l33
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if !_rules[ruleValueRef]() {
					goto l33
				}
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if buffer[position] != rune('A') {
					goto l33
				}
				position++
				if buffer[position] != rune('N') {
					goto l33
				}
				position++
				if buffer[position] != rune('D') {
					goto l33
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if !_rules[ruleValueRef]() {
					goto l33
				}
				add(ruleRange, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 7 Function <- <BeginsWith> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				if !_rules[ruleBeginsWith]() {
					goto l37
				}
				add(ruleFunction, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 8 BeginsWith <- <('b' 'e' 'g' 'i' 'n' 's' '_' 'w' 'i' 't' 'h' SPACING '(' SPACING (AttributeName / AttributeRef) SPACING ',' SPACING ValueRef SPACING ')')> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				if buffer[position] != rune('b') {
					goto l39
				}
				position++
				if buffer[position] != rune('e') {
					goto l39
				}
				position++
				if buffer[position] != rune('g') {
					goto l39
				}
				position++
				if buffer[position] != rune('i') {
					goto l39
				}
				position++
				if buffer[position] != rune('n') {
					goto l39
				}
				position++
				if buffer[position] != rune('s') {
					goto l39
				}
				position++
				if buffer[position] != rune('_') {
					goto l39
				}
				position++
				if buffer[position] != rune('w') {
					goto l39
				}
				position++
				if buffer[position] != rune('i') {
					goto l39
				}
				position++
				if buffer[position] != rune('t') {
					goto l39
				}
				position++
				if buffer[position] != rune('h') {
					goto l39
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l39
				}
				if buffer[position] != rune('(') {
					goto l39
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l39
				}
				{
					position41, tokenIndex41 := position, tokenIndex
					if !_rules[ruleAttributeName]() {
						goto l42
					}
					goto l41
				l42:
					position, tokenIndex = position41, tokenIndex41
					if !_rules[ruleAttributeRef]() {
						goto l39
					}
				}
			l41:
				if !_rules[ruleSPACING]() {
					goto l39
				}
				if buffer[position] != rune(',') {
					goto l39
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l39
				}
				if !_rules[ruleValueRef]() {
					goto l39
				}
				if !_rules[ruleSPACING]() {
					goto l39
				}
				if buffer[position] != rune(')') {
					goto l39
				}
				position++
				add(ruleBeginsWith, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 9 AttributeName <- <([a-z] / [A-Z] / [0-9])+> */
		func() bool {
			position43, tokenIndex43 := position, tokenIndex
			{
				position44 := position
				{
					position47, tokenIndex47 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l48
					}
					position++
					goto l47
				l48:
					position, tokenIndex = position47, tokenIndex47
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l49
					}
					position++
					goto l47
				l49:
					position, tokenIndex = position47, tokenIndex47
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l43
					}
					position++
				}
			l47:
			l45:
				{
					position46, tokenIndex46 := position, tokenIndex
					{
						position50, tokenIndex50 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l51
						}
						position++
						goto l50
					l51:
						position, tokenIndex = position50, tokenIndex50
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l52
						}
						position++
						goto l50
					l52:
						position, tokenIndex = position50, tokenIndex50
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l46
						}
						position++
					}
				l50:
					goto l45
				l46:
					position, tokenIndex = position46, tokenIndex46
				}
				add(ruleAttributeName, position44)
			}
			return true
		l43:
			position, tokenIndex = position43, tokenIndex43
			return false
		},
		/* 10 AttributeRef <- <('#' ([a-z] / [A-Z] / [0-9])+)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				if buffer[position] != rune('#') {
					goto l53
				}
				position++
				{
					position57, tokenIndex57 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l58
					}
					position++
					goto l57
				l58:
					position, tokenIndex = position57, tokenIndex57
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l59
					}
					position++
					goto l57
				l59:
					position, tokenIndex = position57, tokenIndex57
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l53
					}
					position++
				}
			l57:
			l55:
				{
					position56, tokenIndex56 := position, tokenIndex
					{
						position60, tokenIndex60 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l61
						}
						position++
						goto l60
					l61:
						position, tokenIndex = position60, tokenIndex60
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l62
						}
						position++
						goto l60
					l62:
						position, tokenIndex = position60, tokenIndex60
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l56
						}
						position++
					}
				l60:
					goto l55
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
				add(ruleAttributeRef, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 11 ValueRef <- <(':' ([a-z] / [A-Z] / [0-9])+)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if buffer[position] != rune(':') {
					goto l63
				}
				position++
				{
					position67, tokenIndex67 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l68
					}
					position++
					goto l67
				l68:
					position, tokenIndex = position67, tokenIndex67
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l69
					}
					position++
					goto l67
				l69:
					position, tokenIndex = position67, tokenIndex67
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l63
					}
					position++
				}
			l67:
			l65:
				{
					position66, tokenIndex66 := position, tokenIndex
					{
						position70, tokenIndex70 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l71
						}
						position++
						goto l70
					l71:
						position, tokenIndex = position70, tokenIndex70
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l72
						}
						position++
						goto l70
					l72:
						position, tokenIndex = position70, tokenIndex70
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l66
						}
						position++
					}
				l70:
					goto l65
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
				add(ruleValueRef, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 12 SPACING <- <' '*> */
		func() bool {
			{
				position74 := position
			l75:
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l76
					}
					position++
					goto l75
				l76:
					position, tokenIndex = position76, tokenIndex76
				}
				add(ruleSPACING, position74)
			}
			return true
		},
		/* 13 END <- <!.> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79, tokenIndex79 := position, tokenIndex
					if !matchDot() {
						goto l79
					}
					goto l77
				l79:
					position, tokenIndex = position79, tokenIndex79
				}
				add(ruleEND, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
	}
	p.rules = _rules
	return nil
}
