package conditionexpression

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleConditionExpression
	ruleCondition
	ruleAtomicCondition
	ruleComparison
	ruleComparisonOperator
	ruleRange
	ruleFunction
	ruleBeginsWith
	ruleAttributeExists
	ruleAttributeNotExists
	ruleAttributeName
	ruleAttributeRef
	ruleAttribute
	ruleValueRef
	ruleSPACING
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"ConditionExpression",
	"Condition",
	"AtomicCondition",
	"Comparison",
	"ComparisonOperator",
	"Range",
	"Function",
	"BeginsWith",
	"AttributeExists",
	"AttributeNotExists",
	"AttributeName",
	"AttributeRef",
	"Attribute",
	"ValueRef",
	"SPACING",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer string
	buffer []rune
	rules  [17]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 ConditionExpression <- <(SPACING Condition SPACING END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSPACING]() {
					goto l0
				}
				if !_rules[ruleCondition]() {
					goto l0
				}
				if !_rules[ruleSPACING]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleConditionExpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Condition <- <(('(' SPACING Condition SPACING ')') / ('N' 'O' 'T' SPACING Condition) / (AtomicCondition (SPACING ('A' 'N' 'D') SPACING Condition)+) / (AtomicCondition (SPACING ('O' 'R') SPACING Condition)*))> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l5
					}
					position++
					if !_rules[ruleSPACING]() {
						goto l5
					}
					if !_rules[ruleCondition]() {
						goto l5
					}
					if !_rules[ruleSPACING]() {
						goto l5
					}
					if buffer[position] != rune(')') {
						goto l5
					}
					position++
					goto l4
				l5:
					position, tokenIndex = position4, tokenIndex4
					if buffer[position] != rune('N') {
						goto l6
					}
					position++
					if buffer[position] != rune('O') {
						goto l6
					}
					position++
					if buffer[position] != rune('T') {
						goto l6
					}
					position++
					if !_rules[ruleSPACING]() {
						goto l6
					}
					if !_rules[ruleCondition]() {
						goto l6
					}
					goto l4
				l6:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleAtomicCondition]() {
						goto l7
					}
					if !_rules[ruleSPACING]() {
						goto l7
					}
					if buffer[position] != rune('A') {
						goto l7
					}
					position++
					if buffer[position] != rune('N') {
						goto l7
					}
					position++
					if buffer[position] != rune('D') {
						goto l7
					}
					position++
					if !_rules[ruleSPACING]() {
						goto l7
					}
					if !_rules[ruleCondition]() {
						goto l7
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !_rules[ruleSPACING]() {
							goto l9
						}
						if buffer[position] != rune('A') {
							goto l9
						}
						position++
						if buffer[position] != rune('N') {
							goto l9
						}
						position++
						if buffer[position] != rune('D') {
							goto l9
						}
						position++
						if !_rules[ruleSPACING]() {
							goto l9
						}
						if !_rules[ruleCondition]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
					goto l4
				l7:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleAtomicCondition]() {
						goto l2
					}
				l10:
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[ruleSPACING]() {
							goto l11
						}
						if buffer[position] != rune('O') {
							goto l11
						}
						position++
						if buffer[position] != rune('R') {
							goto l11
						}
						position++
						if !_rules[ruleSPACING]() {
							goto l11
						}
						if !_rules[ruleCondition]() {
							goto l11
						}
						goto l10
					l11:
						position, tokenIndex = position11, tokenIndex11
					}
				}
			l4:
				add(ruleCondition, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 AtomicCondition <- <(Comparison / Range / Function)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				{
					position14, tokenIndex14 := position, tokenIndex
					if !_rules[ruleComparison]() {
						goto l15
					}
					goto l14
				l15:
					position, tokenIndex = position14, tokenIndex14
					if !_rules[ruleRange]() {
						goto l16
					}
					goto l14
				l16:
					position, tokenIndex = position14, tokenIndex14
					if !_rules[ruleFunction]() {
						goto l12
					}
				}
			l14:
				add(ruleAtomicCondition, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 Comparison <- <((AttributeName / AttributeRef) SPACING ComparisonOperator SPACING ValueRef)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[ruleAttributeName]() {
						goto l20
					}
					goto l19
				l20:
					position, tokenIndex = position19, tokenIndex19
					if !_rules[ruleAttributeRef]() {
						goto l17
					}
				}
			l19:
				if !_rules[ruleSPACING]() {
					goto l17
				}
				if !_rules[ruleComparisonOperator]() {
					goto l17
				}
				if !_rules[ruleSPACING]() {
					goto l17
				}
				if !_rules[ruleValueRef]() {
					goto l17
				}
				add(ruleComparison, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 4 ComparisonOperator <- <('=' / ('<' !('>' / '=')) / ('<' '>') / ('<' '=') / ('>' !'=') / ('>' '='))> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23, tokenIndex23 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l24
					}
					position++
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('<') {
						goto l25
					}
					position++
					{
						position26, tokenIndex26 := position, tokenIndex
						{
							position27, tokenIndex27 := position, tokenIndex
							if buffer[position] != rune('>') {
								goto l28
							}
							position++
							goto l27
						l28:
							position, tokenIndex = position27, tokenIndex27
							if buffer[position] != rune('=') {
								goto l26
							}
							position++
						}
					l27:
						goto l25
					l26:
						position, tokenIndex = position26, tokenIndex26
					}
					goto l23
				l25:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('<') {
						goto l29
					}
					position++
					if buffer[position] != rune('>') {
						goto l29
					}
					position++
					goto l23
				l29:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('<') {
						goto l30
					}
					position++
					if buffer[position] != rune('=') {
						goto l30
					}
					position++
					goto l23
				l30:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('>') {
						goto l31
					}
					position++
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l32
						}
						position++
						goto l31
					l32:
						position, tokenIndex = position32, tokenIndex32
					}
					goto l23
				l31:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune('>') {
						goto l21
					}
					position++
					if buffer[position] != rune('=') {
						goto l21
					}
					position++
				}
			l23:
				add(ruleComparisonOperator, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 5 Range <- <((AttributeName / AttributeRef) SPACING ('B' 'E' 'T' 'W' 'E' 'E' 'N') SPACING ValueRef SPACING ('A' 'N' 'D') SPACING ValueRef)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleAttributeName]() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleAttributeRef]() {
						goto l33
					}
				}
			l35:
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if buffer[position] != rune('B') {
					goto l33
				}
				position++
				if buffer[position] != rune('E') {
					goto l33
				}
				position++
				if buffer[position] != rune('T') {
					goto l33
				}
				position++
				if buffer[position] != rune('W') {
					goto l33
				}
				position++
				if buffer[position] != rune('E') {
					goto l33
				}
				position++
				if buffer[position] != rune('E') {
					goto l33
				}
				position++
				if buffer[position] != rune('N') {
					goto l33
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if !_rules[ruleValueRef]() {
					goto l33
				}
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if buffer[position] != rune('A') {
					goto l33
				}
				position++
				if buffer[position] != rune('N') {
					goto l33
				}
				position++
				if buffer[position] != rune('D') {
					goto l33
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l33
				}
				if !_rules[ruleValueRef]() {
					goto l33
				}
				add(ruleRange, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 Function <- <(BeginsWith / AttributeExists / AttributeNotExists)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleBeginsWith]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleAttributeExists]() {
						goto l41
					}
					goto l39
				l41:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleAttributeNotExists]() {
						goto l37
					}
				}
			l39:
				add(ruleFunction, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 BeginsWith <- <('b' 'e' 'g' 'i' 'n' 's' '_' 'w' 'i' 't' 'h' SPACING '(' SPACING Attribute SPACING ',' SPACING ValueRef SPACING ')')> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if buffer[position] != rune('b') {
					goto l42
				}
				position++
				if buffer[position] != rune('e') {
					goto l42
				}
				position++
				if buffer[position] != rune('g') {
					goto l42
				}
				position++
				if buffer[position] != rune('i') {
					goto l42
				}
				position++
				if buffer[position] != rune('n') {
					goto l42
				}
				position++
				if buffer[position] != rune('s') {
					goto l42
				}
				position++
				if buffer[position] != rune('_') {
					goto l42
				}
				position++
				if buffer[position] != rune('w') {
					goto l42
				}
				position++
				if buffer[position] != rune('i') {
					goto l42
				}
				position++
				if buffer[position] != rune('t') {
					goto l42
				}
				position++
				if buffer[position] != rune('h') {
					goto l42
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l42
				}
				if buffer[position] != rune('(') {
					goto l42
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l42
				}
				if !_rules[ruleAttribute]() {
					goto l42
				}
				if !_rules[ruleSPACING]() {
					goto l42
				}
				if buffer[position] != rune(',') {
					goto l42
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l42
				}
				if !_rules[ruleValueRef]() {
					goto l42
				}
				if !_rules[ruleSPACING]() {
					goto l42
				}
				if buffer[position] != rune(')') {
					goto l42
				}
				position++
				add(ruleBeginsWith, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 8 AttributeExists <- <('a' 't' 't' 'r' 'i' 'b' 'u' 't' 'e' '_' 'e' 'x' 'i' 's' 't' 's' SPACING '(' SPACING Attribute SPACING ')')> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if buffer[position] != rune('a') {
					goto l44
				}
				position++
				if buffer[position] != rune('t') {
					goto l44
				}
				position++
				if buffer[position] != rune('t') {
					goto l44
				}
				position++
				if buffer[position] != rune('r') {
					goto l44
				}
				position++
				if buffer[position] != rune('i') {
					goto l44
				}
				position++
				if buffer[position] != rune('b') {
					goto l44
				}
				position++
				if buffer[position] != rune('u') {
					goto l44
				}
				position++
				if buffer[position] != rune('t') {
					goto l44
				}
				position++
				if buffer[position] != rune('e') {
					goto l44
				}
				position++
				if buffer[position] != rune('_') {
					goto l44
				}
				position++
				if buffer[position] != rune('e') {
					goto l44
				}
				position++
				if buffer[position] != rune('x') {
					goto l44
				}
				position++
				if buffer[position] != rune('i') {
					goto l44
				}
				position++
				if buffer[position] != rune('s') {
					goto l44
				}
				position++
				if buffer[position] != rune('t') {
					goto l44
				}
				position++
				if buffer[position] != rune('s') {
					goto l44
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l44
				}
				if buffer[position] != rune('(') {
					goto l44
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l44
				}
				if !_rules[ruleAttribute]() {
					goto l44
				}
				if !_rules[ruleSPACING]() {
					goto l44
				}
				if buffer[position] != rune(')') {
					goto l44
				}
				position++
				add(ruleAttributeExists, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 9 AttributeNotExists <- <('a' 't' 't' 'r' 'i' 'b' 'u' 't' 'e' '_' 'n' 'o' 't' '_' 'e' 'x' 'i' 's' 't' 's' SPACING '(' SPACING Attribute SPACING ')')> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if buffer[position] != rune('a') {
					goto l46
				}
				position++
				if buffer[position] != rune('t') {
					goto l46
				}
				position++
				if buffer[position] != rune('t') {
					goto l46
				}
				position++
				if buffer[position] != rune('r') {
					goto l46
				}
				position++
				if buffer[position] != rune('i') {
					goto l46
				}
				position++
				if buffer[position] != rune('b') {
					goto l46
				}
				position++
				if buffer[position] != rune('u') {
					goto l46
				}
				position++
				if buffer[position] != rune('t') {
					goto l46
				}
				position++
				if buffer[position] != rune('e') {
					goto l46
				}
				position++
				if buffer[position] != rune('_') {
					goto l46
				}
				position++
				if buffer[position] != rune('n') {
					goto l46
				}
				position++
				if buffer[position] != rune('o') {
					goto l46
				}
				position++
				if buffer[position] != rune('t') {
					goto l46
				}
				position++
				if buffer[position] != rune('_') {
					goto l46
				}
				position++
				if buffer[position] != rune('e') {
					goto l46
				}
				position++
				if buffer[position] != rune('x') {
					goto l46
				}
				position++
				if buffer[position] != rune('i') {
					goto l46
				}
				position++
				if buffer[position] != rune('s') {
					goto l46
				}
				position++
				if buffer[position] != rune('t') {
					goto l46
				}
				position++
				if buffer[position] != rune('s') {
					goto l46
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l46
				}
				if buffer[position] != rune('(') {
					goto l46
				}
				position++
				if !_rules[ruleSPACING]() {
					goto l46
				}
				if !_rules[ruleAttribute]() {
					goto l46
				}
				if !_rules[ruleSPACING]() {
					goto l46
				}
				if buffer[position] != rune(')') {
					goto l46
				}
				position++
				add(ruleAttributeNotExists, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 10 AttributeName <- <([a-z] / [A-Z] / [0-9])+> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l53
					}
					position++
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l54
					}
					position++
					goto l52
				l54:
					position, tokenIndex = position52, tokenIndex52
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l48
					}
					position++
				}
			l52:
			l50:
				{
					position51, tokenIndex51 := position, tokenIndex
					{
						position55, tokenIndex55 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l56
						}
						position++
						goto l55
					l56:
						position, tokenIndex = position55, tokenIndex55
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l57
						}
						position++
						goto l55
					l57:
						position, tokenIndex = position55, tokenIndex55
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l51
						}
						position++
					}
				l55:
					goto l50
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				add(ruleAttributeName, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 11 AttributeRef <- <('#' ([a-z] / [A-Z] / [0-9])+)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if buffer[position] != rune('#') {
					goto l58
				}
				position++
				{
					position62, tokenIndex62 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l63
					}
					position++
					goto l62
				l63:
					position, tokenIndex = position62, tokenIndex62
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l64
					}
					position++
					goto l62
				l64:
					position, tokenIndex = position62, tokenIndex62
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l58
					}
					position++
				}
			l62:
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					{
						position65, tokenIndex65 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l66
						}
						position++
						goto l65
					l66:
						position, tokenIndex = position65, tokenIndex65
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l67
						}
						position++
						goto l65
					l67:
						position, tokenIndex = position65, tokenIndex65
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l61
						}
						position++
					}
				l65:
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(ruleAttributeRef, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 12 Attribute <- <((AttributeName / AttributeRef) ('.' Attribute)*)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if !_rules[ruleAttributeName]() {
						goto l71
					}
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					if !_rules[ruleAttributeRef]() {
						goto l68
					}
				}
			l70:
			l72:
				{
					position73, tokenIndex73 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l73
					}
					position++
					if !_rules[ruleAttribute]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
				add(ruleAttribute, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 13 ValueRef <- <(':' ([a-z] / [A-Z] / [0-9])+)> */
		func() bool {
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				if buffer[position] != rune(':') {
					goto l74
				}
				position++
				{
					position78, tokenIndex78 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l79
					}
					position++
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l80
					}
					position++
					goto l78
				l80:
					position, tokenIndex = position78, tokenIndex78
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
				}
			l78:
			l76:
				{
					position77, tokenIndex77 := position, tokenIndex
					{
						position81, tokenIndex81 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l82
						}
						position++
						goto l81
					l82:
						position, tokenIndex = position81, tokenIndex81
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l83
						}
						position++
						goto l81
					l83:
						position, tokenIndex = position81, tokenIndex81
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l77
						}
						position++
					}
				l81:
					goto l76
				l77:
					position, tokenIndex = position77, tokenIndex77
				}
				add(ruleValueRef, position75)
			}
			return true
		l74:
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 14 SPACING <- <' '*> */
		func() bool {
			{
				position85 := position
			l86:
				{
					position87, tokenIndex87 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l87
					}
					position++
					goto l86
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
				add(ruleSPACING, position85)
			}
			return true
		},
		/* 15 END <- <!.> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				{
					position90, tokenIndex90 := position, tokenIndex
					if !matchDot() {
						goto l90
					}
					goto l88
				l90:
					position, tokenIndex = position90, tokenIndex90
				}
				add(ruleEND, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
	}
	p.rules = _rules
	return nil
}
